{"version":3,"sources":["components/MoviePagination.js","components/MovieCard.js","components/MovieCasts.js","components/MovieSlider.js","pages/Home.js","components/SearchBox.js","components/Header.js","components/MovieInfo.js","pages/MovieDetail.js","components/ActorInfo.js","pages/ActorDetail.js","pages/BrowseMovie.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MoviePagination","active","parseInt","this","props","activePage","last","totalPages","left","right","items","i","searchTitle","push","Pagination","Item","key","href","Ellipsis","disabled","First","Last","Component","MovieCard","state","movies","parsedQueryString","require","parse","window","location","search","title","type","actor_id","api_key","page","axios","get","then","res","data","results","setState","total_pages","cast","movieList","count","slice","className","isBrowsePage","map","movie","id","poster_path","src","alt","vote_average","MovieCasts","movieCasts","movie_id","casts","name","profile_path","class","character","MovieSlider","Carousel","controls","backdrop_path","Caption","overview","Home","Helmet","charSet","SearchBox","Form","inline","onSubmit","e","searchQuery","document","getElementById","value","preventDefault","bind","InputGroup","FormControl","placeholder","aria-label","aria-describedby","required","Append","Button","variant","Header","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","activeClassName","MovieInfo","movieInfos","movieVideoKey","infos","videos","filter","video","site","length","releaseDate","Date","release_date","toLocaleDateString","width","allow","allowfullscreen","frameBorder","original_title","runtime","MovieDetail","movieSlug","match","params","ActorInfo","actorInfos","birthdayDate","birthday","place_of_birth","biography","ActorDetail","castSlug","pageTitle","App","basename","exact","path","BrowseMovie","component","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.9c29f06d.chunk.js","sourcesContent":["//This is a component to render a pagination in a movie page. Separated from movie card component so the maintenance of this component will be easier\r\n\r\nimport React, {Component} from 'react'; \r\nimport Pagination from 'react-bootstrap/Pagination';\r\n\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass MoviePagination extends Component {\r\n    \r\n    render() {\r\n\r\n        //this is an algorithm to append the pagination\r\n        var active = parseInt(this.props.activePage); //active is the active page of the pagination\r\n        var last = parseInt(this.props.totalPages);\r\n        var delta = 3; //delta is the range between active pagination with the first pagination and last pagination\r\n        var left = active - delta; // left is the index of items which on the left side of active\r\n        var right = active + delta + 1; //right is the index of 3 items which on the right side of active\r\n        var items = []; //items is the pagination items that will be rendered\r\n\r\n        if(last > 1) {\r\n            for (let i = 1; i <= last; i++) {\r\n                //append the pagination item at first, last, active page, 3 on the left of active and 3 on the right of active\r\n                if (i === 1 || i === last || i >= left && i < right) {\r\n                    if(this.props.searchTitle) {\r\n                        items.push(\r\n                            <Pagination.Item key={i} active={i === active} href={`?title=${this.props.searchTitle}&page=${i}`}>{i}\r\n                                \r\n                            </Pagination.Item> \r\n                        );\r\n                    } else {\r\n                        items.push(\r\n                            <Pagination.Item key={i} active={i === active} href={`?page=${i}`}>{i}</Pagination.Item> \r\n                        );\r\n                    }\r\n                    \r\n                }\r\n                //append the ellipsis pagination on the second item and second last item if active < left or active >= left\r\n                if(i === 2 && i < left|| i === last - 1 && i >= right) {\r\n                    items.push(<Pagination.Ellipsis disabled/>)\r\n    \r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Pagination>\r\n\r\n                {/* If it is not search page, render this */}\r\n                {!this.props.searchTitle &&\r\n                    <Pagination.First href=\"?page=1\" />\r\n                }\r\n\r\n                {/* If it is search page, render this */}\r\n                {this.props.searchTitle &&\r\n                    <Pagination.First href={`?title=${this.props.searchTitle}&page=1`} />\r\n                }\r\n\r\n                {/* Render pagination items */}\r\n                {items}\r\n                \r\n                {/* If it is not search page, render this */}\r\n                {!this.props.searchTitle &&\r\n                    <Pagination.Last href={`?page=${last}`} />\r\n                }\r\n\r\n                {/* If it is search page, render this */}\r\n                {this.props.searchTitle &&\r\n                    <Pagination.Last href={`?title=${this.props.searchTitle}&page=${last}`} />\r\n                }\r\n            </Pagination>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MoviePagination;","//this is a component to render movie cards in a list of movie, whether it is top_rated or popular movie\r\n\r\nimport React, {Component} from 'react'; \r\nimport axios from 'axios';\r\nimport MoviePagination from './MoviePagination.js';\r\n\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass MovieCard extends Component {\r\n    state = {\r\n        movies: [],\r\n        totalPages : \"\",\r\n        activePage : \"1\",\r\n        searchTitle : \"\",\r\n    }\r\n\r\n    componentDidMount() {\r\n        //variables to parse query string from URL into a proper object\r\n        const queryString = require('query-string');\r\n        const parsedQueryString = queryString.parse(window.location.search);\r\n\r\n        //searchTitle is the title parameter in the search query on URL\r\n        const searchTitle = parsedQueryString.title;\r\n\r\n        //the type whether this is a top_rated movies or popular movies or movies from search page\r\n        const type = this.props.type; \r\n\r\n        //the ID of the actor\r\n        const actor_id = this.props.actor_id;\r\n\r\n        //the API key\r\n        const api_key= \"f4405389d2c4c04e87e2a7b8edff703b\";\r\n\r\n        //the page for pagination\r\n        let page = \"1\";\r\n        if(parsedQueryString.page) {\r\n            page = parsedQueryString.page;\r\n        }\r\n\r\n        //get the movie via AJAX with axios\r\n\r\n        //if this component will be rendered to the home or browse page, execute this code\r\n        if(!actor_id) {\r\n            axios.get(`https://api.themoviedb.org/3/movie/${type}?api_key=${api_key}&language=en-US&page=${page}`)\r\n            .then(res => {\r\n                const movies = res.data.results;\r\n\r\n                this.setState({ \r\n                    movies: movies,\r\n                    totalPages : res.data.total_pages,\r\n                    activePage: page,\r\n                    searchTitle: searchTitle\r\n                });\r\n            })\r\n        }\r\n\r\n        //if this component will be rendered to the actor page, execute this code\r\n        if(actor_id) {\r\n            axios.get(`https://api.themoviedb.org/3/person/${actor_id}/movie_credits?api_key=${api_key}&&query=your&language=en-US`)\r\n            .then(res => {\r\n                const movies = res.data.cast;\r\n                this.setState({ movies });\r\n            })\r\n        }\r\n\r\n        //if this component will be rendered to the search result page, execute this code\r\n        if(this.props.type === \"search\") {\r\n            axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${api_key}&query=${searchTitle}&language=en-US&page=${page}&include_adult=false`)\r\n            .then(res => {\r\n                const movies = res.data.results;\r\n                this.setState({ \r\n                    movies: movies,\r\n                    totalPages : res.data.total_pages,\r\n                    activePage: page,\r\n                    searchTitle: searchTitle\r\n                });\r\n            })\r\n        }\r\n    }\r\n    \r\n    render() {\r\n\r\n        let movieList = [];\r\n\r\n        //if this component has count props, execute this code to limit the number of movies that will be showed\r\n        if(this.props.count) {\r\n            movieList = this.state.movies.slice(0, parseInt(this.props.count))\r\n        } else {\r\n            movieList = this.state.movies\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n\r\n                {/* The pagination component, will be rendered if this component will be rendered to the browse page */}\r\n                {this.props.isBrowsePage &&\r\n                    <MoviePagination className=\"col-12\" activePage={this.state.activePage} searchTitle={this.state.searchTitle} totalPages={this.state.totalPages}></MoviePagination>\r\n                }\r\n\r\n                {/* The Movies sub component */}\r\n                <ul className=\"movie-card-container list-unstyled col-12\">\r\n                    {movieList.map(movie => \r\n                        <li className=\"movie-card\">\r\n                            <a href={ `/movies/${movie.id}` } title={movie.title}>\r\n                                <div className=\"image-container\">\r\n                                    {/* Render the image from API if there is a poster_path */}\r\n                                    {movie.poster_path &&\r\n                                        <img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={`${movie.title} Poster`} />\r\n                                    }\r\n                                    {!movie.poster_path &&\r\n                                        <img className=\"popcorn-img\" src=\"/icons/popcorn.svg\" alt={`${movie.title} Poster`} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"movie-card--title\">\r\n                                    <p className=\"flex rating\"><img src=\"/icons/star.svg\" /> {movie.vote_average}</p>\r\n                                    <p>{movie.title}</p>\r\n                                </div>\r\n                            </a>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n\r\n                {/* The pagination component, will be rendered if this component will be rendered to the browse page */}\r\n                {this.props.isBrowsePage &&\r\n                    <MoviePagination activePage={this.state.activePage} searchTitle={this.state.searchTitle} totalPages={this.state.totalPages}></MoviePagination>\r\n                }\r\n                \r\n            </div>\r\n            \r\n                \r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieCard;","//this is a component to render movie casts in a list of movie casts in a movie detail page. It needs movie id parameter as a props\r\n\r\nimport React, {Component} from 'react'; \r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass MovieCasts extends Component {\r\n    state = {\r\n        movieCasts: []\r\n    }\r\n\r\n    componentDidMount() {\r\n    const movie_id = this.props.movie_id; //the type whether this is a top_rated movies or popular movies\r\n    const api_key= \"f4405389d2c4c04e87e2a7b8edff703b\"\r\n\r\n    //get the movie casts via AJAX with axios\r\n    if(movie_id) {\r\n        axios.get(`https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${api_key}\r\n        `)\r\n            .then(res => {\r\n                const casts = res.data.cast;\r\n                this.setState({ movieCasts: casts  });\r\n            })\r\n        } else {\r\n            axios.get(`https://api.themoviedb.org/3/person/popular?api_key=${api_key}\r\n            `)\r\n                .then(res => {\r\n                    let casts = res.data.results;\r\n                    if(this.props.count) {\r\n                        casts = casts.slice(0,parseInt(this.props.count))\r\n                    }\r\n                    this.setState({ movieCasts: casts  });\r\n                })\r\n            }\r\n    } \r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <ul className=\"cast-card-container list-unstyled col-12\">\r\n                    {this.state.movieCasts.map(cast => \r\n                        <li className=\"cast-card\">\r\n                            <a href={ `/people/${cast.id}` } title={cast.name}>\r\n                                <div className=\"image-container\">\r\n                                    {/* Render the image from API if there is a profile_path */}\r\n                                    {cast.profile_path &&\r\n                                        <img src={`https://image.tmdb.org/t/p/w300${cast.profile_path}`} alt={`${cast.name} Picture`} />\r\n                                    }\r\n                                    {!cast.profile_path &&\r\n                                        <img className=\"backstage-img\" src=\"/icons/backstage.svg\" alt={`${cast.name} Picture`} />\r\n                                    }\r\n                                </div>\r\n                                <div class=\"cast-card--title\">\r\n                                    <p><b>{cast.name}</b></p>\r\n                                    {cast.character &&\r\n                                        <p>as {cast.character}</p>\r\n                                    }\r\n                                </div>\r\n                            </a>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            \r\n                \r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieCasts;","//this is a component to render movie cards in a list of movie, whether it is top_rated or popular movie\r\n\r\nimport React, {Component} from 'react'; \r\nimport axios from 'axios';\r\nimport Carousel from 'react-bootstrap/Carousel'\r\n\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nclass MovieSlider extends Component {\r\n    state = {\r\n        movies: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //the type whether this is a top_rated movies or popular movies or movies from search page\r\n        const type = this.props.type; \r\n\r\n        //the API key\r\n        const api_key= \"f4405389d2c4c04e87e2a7b8edff703b\";\r\n\r\n        //get the movie via AJAX with axios\r\n\r\n        //if this component will be rendered to the home or browse page, execute this code\r\n        axios.get(`https://api.themoviedb.org/3/movie/${type}?api_key=${api_key}&language=en-US&page=1`)\r\n        .then(res => {\r\n            const movies = res.data.results;\r\n\r\n            this.setState({ \r\n                movies: movies,\r\n            });\r\n        })\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <Carousel\r\n                controls=\"false\"\r\n            >\r\n                {\r\n                    this.state.movies.slice(0, parseInt(this.props.count)).map(movie=>\r\n                        <Carousel.Item>\r\n                            <a href={ `/movies/${movie.id}`}>\r\n                                <div className=\"carousel-img-container\">\r\n                                    <img\r\n                                    className=\"d-block w-100\"\r\n                                    src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\r\n                                    alt={`${movie.title} Poster`}\r\n                                    /> \r\n                                    <div class=\"overlay\"></div>  \r\n                                </div>\r\n                                <div className=\"container relative\">\r\n                                    <Carousel.Caption className=\"col-12\">\r\n                                        <h3>{movie.title}</h3>\r\n                                        <p>{movie.overview}</p>\r\n                                    </Carousel.Caption>\r\n                                </div>\r\n                                \r\n                            </a>\r\n                        </Carousel.Item>\r\n                    )\r\n                }\r\n    \r\n            </Carousel>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieSlider;","//this component is to render the homepage of this application\r\n\r\nimport React, {Component} from 'react'; \r\nimport MovieCard from '../components/MovieCard';\r\nimport MovieCasts from '../components/MovieCasts';\r\n\r\nimport MovieSlider from '../components/MovieSlider';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n        <div className =\"home-container\">\r\n            {/* Show The Title of The Page */}\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>CouchPotato - Browse for Your Favourite Movies Here!</title>\r\n            </Helmet>\r\n            {/* Show The Slider */}\r\n            <MovieSlider type=\"popular\" count=\"5\"/>\r\n            <div className=\"container content no-pad\">\r\n                <h1 className=\"home-title\">CouchPotato - Browse for Your Favourite Movies Here!</h1>\r\n\r\n                {/* Show 10 Top Rated Movies */}\r\n                <MovieCard type=\"top_rated\" count=\"10\"/>\r\n\r\n                {/* Show 10 Popular Actors */}\r\n                <h2>Popular Actor/Actress Today</h2>\r\n                <MovieCasts count=\"10\"/>\r\n\r\n            </div>\r\n        </div>\r\n        \r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","//This component is to Render Search Box. Main Purpose is to search movie\r\n\r\nimport React, {Component} from 'react'; \r\nimport Form from 'react-bootstrap/Form'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nclass SearchBox extends Component {\r\n\r\n    render() {\r\n        var search = function (e) {\r\n            let searchQuery = document.getElementById('searchForm').value;\r\n            e.preventDefault();\r\n            window.location.href=`/search?title=${searchQuery}`;\r\n        }\r\n      \r\n        return (\r\n            <Form inline onSubmit={search.bind(this)}>\r\n                <InputGroup  className=\"search-input\" >\r\n                    <FormControl\r\n                    placeholder=\"Search Movies...\"\r\n                    aria-label=\"Search Movies...\"\r\n                    aria-describedby=\"basic-addon2\" id=\"searchForm\" required\r\n                    />\r\n                    <InputGroup.Append>\r\n                    <Button type=\"submit\" variant=\"outline-secondary\"><img className=\"search-icon\" src=\"/icons/search.svg\" alt=\"search-icon\"/></Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </Form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBox;","//this component is to render the header navigation of this application. Contains Search Box, Link to Popular and Top Rated Movies, and Responsive Hamburger Button which is generated with React Bootstrap\r\n\r\nimport React, {Component} from 'react'; \r\nimport SearchBox from './SearchBox.js';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n        <header>\r\n            <div className=\"container \">\r\n                <Navbar expand=\"md\" className=\"flex navbar-dark\" >\r\n                    <Navbar.Brand className=\"brand-name\" href=\"/\">CouchPotato</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"ml-auto\">\r\n                            <Nav.Link href=\"/top_rated\" activeClassName=\"active\">Top Rated</Nav.Link>\r\n                            <Nav.Link href=\"/popular\" activeClassName=\"active\">Popular</Nav.Link>\r\n                        </Nav>\r\n                        <SearchBox />\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","//this component is to render the detail of information of a movie, such as title, description, and list of casts\r\n\r\nimport React, {Component} from 'react'; \r\nimport axios from 'axios';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nclass MovieInfo extends Component {\r\n    state = {\r\n        movieInfos: {},\r\n        movieCasts : [],\r\n        movieVideoKey: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        const movie_id = this.props.movie_id;\r\n        const api_key= \"f4405389d2c4c04e87e2a7b8edff703b\";\r\n        \r\n        //get the movie info via AJAX with axios\r\n        axios.get(`https://api.themoviedb.org/3/movie/${movie_id}?api_key=${api_key}&language=en-US`)\r\n        .then(res => {\r\n            const infos = res.data;\r\n            this.setState({ movieInfos: infos  });\r\n        })\r\n\r\n        //get the movie video via AJAX with axios\r\n        axios.get(`https://api.themoviedb.org/3/movie/${movie_id}/videos?api_key=${api_key}&language=en-US`)\r\n        .then(res => {\r\n            let videos = res.data.results;\r\n            videos = videos.filter(video => video.site == \"YouTube\");\r\n\r\n            //if there is a Youtube video link, then set the movieVideoKey state\r\n            if(videos.length > 0) {\r\n                this.setState({ movieVideoKey: videos[0].key  });\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    render() {\r\n        //convert the birthday date into the locale string\r\n        let releaseDate = (new Date(this.state.movieInfos.release_date)).toLocaleDateString();\r\n        return (\r\n        <div className=\"movie-info\">\r\n            {/* For the title */}\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{ `Couch Potato - ${ this.state.movieInfos.title }` }</title>\r\n            </Helmet>\r\n            <div className=\"container\">\r\n                {/* render the YouTube video */}\r\n                {this.state.movieVideoKey &&\r\n                    <iframe className=\"trailer-video\" width=\"100%\" src={`https://www.youtube.com/embed/${this.state.movieVideoKey}`} allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen frameBorder=\"0\"></iframe>\r\n                }\r\n                 {/* render the YouTube video */}\r\n\r\n                <section className=\"row section\">\r\n                        {/* Render the poster which hidden itself at mobile device when it has video for aesthetic purpose */}\r\n                        {this.state.movieVideoKey &&\r\n                        <div className=\"col-sm-3\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${this.state.movieInfos.poster_path}`} className=\"img-fluid d-none d-sm-block\" alt={this.state.movieInfos.title} />\r\n                        </div>\r\n                        }\r\n\r\n                        {/* Render the poster for all devices it does not have a video for aesthetic purpose */}\r\n                        {!this.state.movieVideoKey &&\r\n                        <div className=\"col-sm-3\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${this.state.movieInfos.backdrop_path}`} className=\"img-fluid mb-2 d-block d-sm-none backdrop\" alt={this.state.movieInfos.title}/>\r\n\r\n                            <img src={`https://image.tmdb.org/t/p/w300${this.state.movieInfos.poster_path}`} className=\"img-fluid d-none d-sm-block\" alt={this.state.movieInfos.title}  />\r\n                        </div>\r\n\r\n                        }\r\n                    \r\n                    <div className=\"col-sm-9\">\r\n                        \r\n                        <div className=\"flex\">\r\n                            <h1 className=\"movie-info--title\">{this.state.movieInfos.original_title}</h1>\r\n                            <p className=\"flex rating\">\r\n                                <span className=\"icon\">\r\n                                    <img src=\"/icons/star.svg\" />\r\n                                </span> {this.state.movieInfos.vote_average}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"flex my-2\">\r\n                            \r\n                            <div className=\"runtime\">\r\n                                <p className=\"flex\"><span className=\"icon\"><img src=\"/icons/calendar.svg\" /></span>{this.state.movieInfos.runtime} minutes</p>\r\n                            </div>\r\n                            <div className=\"release_date\">\r\n                                <p className=\"flex\"><span className=\"icon\"><img src=\"/icons/clock.svg\" /></span>{releaseDate}</p>\r\n                            </div>\r\n                        </div>\r\n                        <h2>Overview</h2>\r\n                        <p>{this.state.movieInfos.overview}</p>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieInfo;","//this component is to render the movie detail page of this application\r\n\r\nimport React, {Component} from 'react'; \r\nimport MovieInfo from '../components/MovieInfo';\r\nimport MovieCasts from '../components/MovieCasts';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nclass MovieDetail extends Component {\r\n\r\n    render() {\r\n        const { movieSlug } = this.props.match.params\r\n        return (\r\n        <div className=\"movie-detail\">\r\n            <MovieInfo movie_id ={`${movieSlug}`}/>\r\n            <div className=\"container\">\r\n                <h2>Cast List</h2>\r\n                <MovieCasts movie_id ={`${movieSlug}`}/>\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieDetail;","//this component is to render the detail of information of an actor/actress, mainly about biodata\r\n\r\nimport React, {Component} from 'react'; \r\nimport axios from 'axios';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nclass ActorInfo extends Component {\r\n    state = {\r\n        actorInfos: {},\r\n    }\r\n\r\n    componentDidMount() {\r\n        const actor_id = this.props.actor_id;\r\n        const api_key= \"f4405389d2c4c04e87e2a7b8edff703b\";\r\n\r\n        //get the movie info via AJAX with axios\r\n        axios.get(`https://api.themoviedb.org/3/person/${actor_id}?api_key=${api_key}&language=en-US`)\r\n            .then(res => {\r\n                const infos = res.data;\r\n                this.setState({ actorInfos: infos  });\r\n            })\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        //convert the birthday date into the locale string\r\n        let birthdayDate = (new Date(this.state.actorInfos.birthday)).toLocaleDateString();\r\n\r\n        return (\r\n        <div>\r\n            {/* Show The Title of The Page */}\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{ `Couch Potato - ${ this.state.actorInfos.name }` }</title>\r\n            </Helmet>\r\n            <h1>{this.state.actorInfos.name}</h1>\r\n\r\n            <section className=\"row\">\r\n                <div className=\"col-sm-3\">\r\n                    {this.state.actorInfos.profile_path &&\r\n                        <img src={`https://image.tmdb.org/t/p/w300${this.state.actorInfos.profile_path}`} className=\"img-fluid\" alt={this.state.actorInfos.name} />\r\n                    }\r\n\r\n                    {!this.state.actorInfos.profile_path &&\r\n                        <img src=\"/icons/backstage.svg\" className=\"img-fluid\" alt={this.state.actorInfos.name} />\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"col-sm-9\">\r\n                <h2>Biodata</h2>\r\n                    <p><b>Place of Birth: </b></p>\r\n                    <p>{this.state.actorInfos.place_of_birth}</p>\r\n                    <p><b>Date of Birth: </b></p>\r\n                    <p>{birthdayDate}</p>\r\n\r\n                    <h2>Biography</h2>\r\n                    <p>{this.state.actorInfos.biography}</p>\r\n                </div>\r\n            </section>\r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ActorInfo;","//this component is to render the movie detail page of this application\r\n\r\nimport React, {Component} from 'react'; \r\nimport ActorInfo from '../components/ActorInfo';\r\nimport MovieCard from '../components/MovieCard';\r\n\r\nclass ActorDetail extends Component {\r\n    render() {\r\n        const { castSlug } = this.props.match.params\r\n\r\n        return (\r\n            <div className=\"actor-detail\">\r\n                \r\n                <div className=\"container content no-pad\">\r\n                    <div>\r\n                        <ActorInfo actor_id={`${castSlug}`} />\r\n                    </div>\r\n                    <div>\r\n                        <h3>Movieography</h3>\r\n                        <MovieCard actor_id={`${castSlug}`}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ActorDetail;","//this page is for browse movie page, like for Top Movies and Popular Movies, also Search Results Page. Renders Movie Card Page and paginations\r\n\r\nimport React, {Component} from 'react'; \r\nimport MovieCard from '../components/MovieCard';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nclass ActorDetail extends Component {\r\n    \r\n    render() {\r\n        //these variables below is to render the title of the page. Whether to render Top Movies page, Popular page, or Search Result Page\r\n        let pageTitle = \"\";\r\n\r\n        //set the title to \"Top\" if type=\"top_rated\"\r\n        if(this.props.type === \"top_rated\") {\r\n            pageTitle = \"Top\"\r\n        }\r\n\r\n        //set the title to \"Popular\" if type=\"popular\"\r\n        if(this.props.type === \"popular\") {\r\n            pageTitle = \"Popular\"\r\n        }\r\n\r\n        //variables to parse query string from URL into a proper object\r\n        const queryString = require('query-string');\r\n        const parsedQueryString = queryString.parse(window.location.search);\r\n\r\n        //searchTitle is the title parameter in the search query on URL\r\n        const searchTitle = parsedQueryString.title;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {this.props.type !== \"search\" &&\r\n                    <Helmet>\r\n                        <meta charSet=\"utf-8\" />\r\n                        <title>CouchPotato - {pageTitle} Movies</title>\r\n                    </Helmet>\r\n                }\r\n\r\n                {this.props.type === \"search\" &&\r\n                    <Helmet>\r\n                        <meta charSet=\"utf-8\" />\r\n                        <title>CouchPotato - Search Results for \"{searchTitle}\"</title>\r\n                    </Helmet>\r\n                }\r\n                \r\n                {this.props.type !== \"search\" &&\r\n                    <h1>{pageTitle} Movies</h1>\r\n                }\r\n                {this.props.type === \"search\" &&\r\n                    <h1> Search Results For \"{searchTitle}\"</h1>\r\n                }\r\n                <MovieCard type={this.props.type} isBrowsePage=\"true\" searchTitle=\"\" />    \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ActorDetail;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Home from './pages/Home.js';\nimport Header from './components/Header.js';\nimport MovieDetail from './pages/MovieDetail';\nimport ActorDetail from './pages/ActorDetail';\nimport BrowseMovie from './pages/BrowseMovie';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation\n} from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-body\">\n\n          {/* I use normal routing here */}\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/top_rated\">\n            <BrowseMovie type=\"top_rated\" />\n          </Route>\n          <Route path=\"/popular\">\n            <BrowseMovie type=\"popular\" />\n          </Route>\n          <Route exact path=\"/search\">\n            <BrowseMovie type=\"search\" />\n          </Route>\n\n          {/* I use switch for nested routes, so those components will be rendered inclusively and it will be helpful for nested URLs */}\n          <Switch>\n            <Route path=\"/movies/:movieSlug\" component= {MovieDetail}>\n            </Route>\n            <Route path=\"/people/:castSlug\" component={ActorDetail}>\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}